%{
 ______                __                     ____               __        
/\__  _\              /\ \                   /\  _`\            /\ \       
\/_/\ \/    __   _____\ \ \___   _ __    __  \ \ \_\ \_ __   ___\ \ \____  
   \ \ \  /'__`\/\ '__`\ \  _ `\/\`'__\/'__`\ \ \ ,__/\`'__\/ __`\ \ '__`\ 
    \ \ \/\  __/\ \ \_\ \ \ \ \ \ \ \//\ \_\.\_\ \ \/\ \ \//\ \_\ \ \ \_\ \
     \ \_\ \____\\ \ ,__/\ \_\ \_\ \_\\ \__/.\_\\ \_\ \ \_\\ \____/\ \_,__/
      \/_/\/____/ \ \ \/  \/_/\/_/\/_/ \/__/\/_/ \/_/  \/_/ \/___/  \/___/ 
                   \ \_\                                                   
                    \/_/                                                   
___________________________________________________________________________

Name:       get_prefs.m
Purpose:    Set preferences of the TephraProb package
Author:     Sebastien Biass
Created:    April 2015
Updates:    April 2016:     Added the option to scale colormaps and plot the
                            grid extent
Copyright:  Sebastien Biass, University of Geneva, 2015
License:    GNU GPL3

This file is part of TephraProb

TephraProb is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TephraProb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TephraProb.  If not, see <http://www.gnu.org/licenses/>.
%}

function get_prefs
% Check that you are located in the correct folder!
if ~exist(fullfile(pwd, 'tephraProb.m'), 'file')
    errordlg(sprintf('You are located in the folder:\n%s\nIn Matlab, please navigate to the root of the TephraProb\nfolder, i.e. where tephraProb.m is located. and try again.', pwd), ' ')
    return
end

global p

%%%%%%%%%%%%%%%%%%%%%%%
scr = get(0,'ScreenSize');
wd   = 750;
h    = 500;
p.fig = figure(...
    'position', [scr(3)/2-wd/2 scr(4)/2-h/2 wd h],...
    'Color', [.25 .25 .25],...
    'Resize', 'off',...
    'Tag', 'Configuration',...
    'Toolbar', 'none',...
    'Menubar', 'none',...
    'Name', 'TephraProb Preferences',...
    'NumberTitle', 'off');

p.pan = uipanel(...
    'units', 'normalized',...
    'position', [.025 .025 .95 .95],...
    'title', 'Preferences',...
    'BackgroundColor', [.25 .25 .25],...
    'ForegroundColor', [.9 .5 0],...
    'HighlightColor', [.9 .5 0],...
    'BorderType', 'line');

    p.pan_prob = uipanel(...
        'Parent', p.pan,...
        'units', 'normalized',...
        'position', [.02 .15 .47 .825],...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.3 .3 .3],...
        'BorderType', 'line');


        p.prb_title = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .92 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Probability calculations',...
            'FontWeight', 'bold');

        p.mass_th_txt = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .87 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Mass thresholds for probability calculations (kg/m2):');

        p.mass_th = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .79 .9 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'Tooltip', 'Enter comma delimited mass thresholds');

        p.prob_th_txt = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .72 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Probability thresholds for probabilistic isomass maps (%):');

        p.prob_th = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .64 .9 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'Tooltip', 'Enter comma delimited probabilities (%). A probability of occurrence is considered as being the inverse of the percentile.');
        
        
        p.file_title = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .54 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'File management',...
            'FontWeight', 'bold');
        
        p.prob_digits_txt = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .49 .8 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Number of digits of tephra accumulations to save:');

        p.prob_digits = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.85 .475 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'String', '2',...
            'Tooltip', sprintf('Controls the rounding of tephra accumulations and the minimum accumulation below which\nall accumulations are equaled to 0')); 
        
        p.prob_round_txt = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .42 .8 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Round Tephra2 output files?');

        p.prob_round = uicontrol(...
            'parent', p.pan_prob,...
             'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.85 .405 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Enable', 'off',...
            'Tooltip', sprintf('If selected, each Tephra2 output will be rounded to the significant digit during probability calculations and the original file will be overwritten.\nThis increases the processing time but decreases disk usage.'));
        
        p.contour_title = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .35 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Contours properties',...
            'FontWeight', 'bold');

        p.prob_ctr_txt = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .3 .6 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Contours of probability maps:');
        
        p.prob_ctr = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .21 .9 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'Tooltip', sprintf('Probability contours displayed on maps (0-1).\nEnter comma delimited values'));

        p.pim_ctr_txt = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .15 .6 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Contours of isomass maps (kg/m2):');
        
        p.pim_ctr = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .06 .9 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'Tooltip', sprintf('Mass contours displayed on maps (kg/m2).\nEnter comma delimited values'));
             
p.pan_map = uipanel(...
    'Parent', p.pan,...
    'units', 'normalized',...
    'position', [.51 .15 .47 .825],...
    'BackgroundColor', [.25 .25 .25],...
    'ForegroundColor', [.5 .5 .5],...
    'HighlightColor', [.3 .3 .3],...
    'BorderType', 'line');

        p.prb_title = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .92 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'General map display',...
            'FontWeight', 'bold');

        p.plot_extent_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .87 .39 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Plot domain:',...
            'Tooltip', sprintf('Plots the extent of the computation grid on the final maps'));
        p.plot_extent = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.4 .855 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Tooltip', sprintf('Plots the extent of the computation grid on the final maps'));

        p.plot_label_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.55 .87 .39 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Plot contours labels?:');
        p.plot_label = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.9 .855 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Tooltip', sprintf('Plot values of all defined contours on the final map\nDisable if the map display is too busy.'));

%         p.plot_points_txt = uicontrol(...
%             'parent', p.pan_map,...
%             'style', 'text',...
%             'units', 'normalized',...
%             'position', [.05 .8 .6 .05],...
%             'HorizontalAlignment', 'left',...
%             'BackgroundColor', [.25 .25 .25],...
%             'ForegroundColor', [1 1 1],...
%             'String', 'Plot hazard curves:');
        p.plot_points_points_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .8 .39 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Hazard curve location:');
        p.plot_points_points = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.4 .785 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Tooltip', 'Plot hazard curve points on maps');
        p.plot_points_labels_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.55 .8 .39 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Hazard curve name:');
        p.plot_points_labels = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.9 .785 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Tooltip', 'Plot hazard curve labels on maps');

        p.basemap_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .66 .3 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Basemap:');
        
        p.basemap = uicontrol(...
            'parent', p.pan_map,...
            'style', 'popup',...
            'unit', 'normalized',...
            'position', [.23 .63 .25 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],...
            'Tooltip', 'Choose the basemap',...
            'String', {'None', 'Google Map'},...
            'Value', 2);
        
        p.GE_export_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .73 .3 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Export Google Earth:');
        
        p.GE_export = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.4 .715 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Tooltip', 'Export maps to a KMZ file');
        
        p.GE_show_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.55 .73 .3 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Show Google Earth:');
        
        p.GE_show = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.9 .715 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Tooltip', 'Attempt to open Google Earth to display the results');


        p.prb_title = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .54 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Probability maps',...
            'FontWeight', 'bold');

        p.min_prob_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .49 .7 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Minimum probability to plot:');

        p.min_prob = uicontrol(...
            'parent', p.pan_map,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.725 .48 .175 .07],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'Tooltip', sprintf('Defines the lowest probability value to be plotted as a color.\nAny smaller value will be transparent.'));
        
        p.prob_scale_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .42 .7 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Scale colorbar?');

        p.prob_scale = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.725 .4 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Tooltip', 'Scale the colormap across the minimum and maximum specified probabilities of all plotted maps');

       p.prob_cmap_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .35 .7 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Colormap');

        p.prob_cmap = uicontrol(...
            'parent', p.pan_map,...
            'style', 'popup',...
            'unit', 'normalized',...
            'position', [.725 .31 .25 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],...
            'Tooltip', 'Choose the colormap of the probability maps');

        
     p.prb_title = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .26 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Probabilistic isomass maps',...
            'FontWeight', 'bold');

        p.min_mass_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .2 .7 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Minimum mass accumulation to plot (kg/m2):');

        p.min_mass = uicontrol(...
            'parent', p.pan_map,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.725 .19 .175 .07],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'Tooltip', sprintf('Defines the lowest mass value to be plotted as a color.\nAny smaller value will be transparent.'));
        
        p.pim_scale_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .125 .4 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Scale colorbar?');
        
        p.pim_scale = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.325 .11 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 0,...
            'Tooltip', 'Scale the colormap across the minimum and maximum specified probabilities of all plotted maps');

        
        p.pim_log_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.5 .125 .4 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Log scale?');
        
        p.pim_log = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.725 .11 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 0,...
            'Tooltip', 'Plot isomass colormap on a log scale');
        
       p.pim_cmap_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .05 .7 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Colormap');

        p.pim_cmap = uicontrol(...
            'parent', p.pan_map,...
            'style', 'popup',...
            'unit', 'normalized',...
            'position', [.725 .01 .25 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],...
            'Tooltip', 'Choose the colormap of the isomass maps');


p.but_GM = uicontrol(...
    'parent', p.pan,...
    'Style', 'pushbutton',...
    'units', 'normalized',...
    'position', [.55 .025 .13 .1],...
    'BackgroundColor', [.3 .3 .3],...
    'ForegroundColor', [.9 .5 .0],...
    'String', 'Set Google API');

p.but_ok = uicontrol(...
    'parent', p.pan,...
    'Style', 'pushbutton',...
    'units', 'normalized',...
    'position', [.85 .025 .13 .1],...
    'BackgroundColor', [.3 .3 .3],...
    'ForegroundColor', [.9 .5 .0],...
    'String', 'Ok');

p.but_default = uicontrol(...
    'parent', p.pan,...
    'Style', 'pushbutton',...
    'units', 'normalized',...
    'position', [.7 .025 .13 .1],...
    'BackgroundColor', [.3 .3 .3],...
    'ForegroundColor', [.9 .5 .0],...
    'String', 'Default');

if exist([getenv('CODE'), filesep, 'VAR', filesep, 'prefs.mat'], 'file')
    parse_data('prefs')
else
    parse_data('prefs_default')
end

set(p.but_ok, 'callback', {@but_ok, p})
set(p.but_default, 'callback', {@but_default, p})
set(p.but_GM, 'callback', {@but_GM, p})

function but_ok(~, ~, p)

prefs.prob.mass_thresh  = cell2mat(cellfun(@str2num,strsplit(get(p.mass_th, 'String'), ','),'un',0));
prefs.prob.prob_thresh  = cell2mat(cellfun(@str2num,strsplit(get(p.prob_th, 'String'), ','),'un',0));

prefs.maps.prob_contour = cell2mat(cellfun(@str2num,strsplit(get(p.prob_ctr, 'String'), ','),'un',0));
prefs.maps.mass_contour = cell2mat(cellfun(@str2num,strsplit(get(p.pim_ctr, 'String'), ','),'un',0));

prefs.maps.min_prob     = cell2mat(cellfun(@str2num,strsplit(get(p.min_prob, 'String'), ','),'un',0));
prefs.maps.min_mass     = cell2mat(cellfun(@str2num,strsplit(get(p.min_mass, 'String'), ','),'un',0));

prefs.maps.scale_prob   = get(p.prob_scale, 'Value');
prefs.maps.scale_pim    = get(p.pim_scale, 'Value');

prefs.maps.plot_extent  = get(p.plot_extent, 'Value');

prefs.maps.plot_labels  = get(p.plot_label, 'Value');
prefs.maps.plot_pointC  = get(p.plot_points_points, 'Value');
prefs.maps.plot_labC    = get(p.plot_points_labels, 'Value');

prefs.maps.GE_export    = p.GE_export.Value;
prefs.maps.GE_show      = p.GE_show.Value;

prefs.maps.basemap      = p.basemap.Value;

prefs.files.nbDigits    = str2double(get(p.prob_digits, 'String'));

% prefs.files.sum         = get(p.prob_type_sum, 'Value');
% prefs.files.prob        = get(p.prob_type_prob, 'Value');
% prefs.files.IM          = get(p.prob_type_IM, 'Value');
% prefs.files.col         = get(p.prob_type_3c, 'Value');
% prefs.files.matrix      = get(p.prob_type_mat, 'Value');
% prefs.files.raster      = get(p.prob_type_arc, 'Value');
% prefs.files.zip         = get(p.prob_zip, 'Value');

prefs.cmap              = p.prob_cmap.String;
prefs.maps.prob_cmap    = get(p.prob_cmap, 'Value');
prefs.maps.mass_cmap    = get(p.pim_cmap, 'Value');
prefs.maps.mass_log     = get(p.pim_log, 'Value');

save(fullfile(getenv('CODE'), 'VAR', 'prefs.mat'), 'prefs');

close(gcbf)

function but_default(~, ~, ~)
parse_data('prefs_default')

function but_GM(~, ~, ~)
apiKey = inputdlg({'Google Map API Key'},...
              'API', [1 50]); 
save(fullfile(getenv('CODE'), 'dependencies', 'api_key.mat'), 'apiKey');
disp('API Key saved');

function parse_data(file)
global p


load(fullfile(getenv('CODE'), 'VAR', file));

% Prob calculations - Mass threshold
tmp = sprintf('%.2f,' , prefs.prob.mass_thresh);
set(p.mass_th, 'String', tmp(1:end-1));

% Prob calculations - Prob threshold
tmp = sprintf('%.2f,' , prefs.prob.prob_thresh);
set(p.prob_th, 'String', tmp(1:end-1));

% Map display - Prob threshold
tmp = sprintf('%.2f,' , prefs.maps.prob_contour);
set(p.prob_ctr, 'String', tmp(1:end-1));

% Map display - IM threshold
tmp = sprintf('%.2f,' , prefs.maps.mass_contour);
set(p.pim_ctr, 'String', tmp(1:end-1));

% Map display - Min prob
tmp = sprintf('%.2f,' , prefs.maps.min_prob);
set(p.min_prob, 'String', tmp(1:end-1));

% Map display - Min mass
tmp = sprintf('%.2f,' , prefs.maps.min_mass);
set(p.min_mass, 'String', tmp(1:end-1));

% Scaling
set(p.prob_scale, 'Value', prefs.maps.scale_prob);
set(p.pim_scale, 'Value', prefs.maps.scale_pim);
set(p.plot_extent, 'Value', prefs.maps.plot_extent);

set(p.plot_label, 'Value', prefs.maps.plot_labels);
set(p.plot_points_points, 'Value', prefs.maps.plot_pointC);
set(p.plot_points_labels, 'Value', prefs.maps.plot_labC);

% Files
set(p.prob_digits, 'String', num2str(prefs.files.nbDigits));

% 
p.prob_cmap.String  = prefs.cmap;
p.prob_cmap.Value   = prefs.maps.prob_cmap;
p.pim_cmap.String   = prefs.cmap;
p.pim_cmap.Value    = prefs.maps.mass_cmap;
p.pim_log.Value     = prefs.maps.mass_log; 

p.GE_export.Value   = prefs.maps.GE_export;
p.GE_show.Value     = prefs.maps.GE_show;
p.basemap.Value     = prefs.maps.basemap;
